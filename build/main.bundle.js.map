{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/elements/puzzle-board.js","webpack:///./src/elements/puzzle-controls.js","webpack:///./src/elements/puzzle-info.js","webpack:///./src/interactions/index.js","webpack:///./src/main.js","webpack:///./src/styles/index.scss"],"names":["PuzzleBoard","rows","columns","tileSize","rootElem","document","getElementById","id","constructor","_generateHex","join","puzzleBoardElem","puzzleContainerElem","rowsArr","Array","keys","columnsArr","rowsMatrix","totalCellCount","solvedCondition","isSolved","isScrambling","shiftCellCount","puzzleInfo","puzzleControls","createElement","cellNumber","classList","add","setAttribute","forEach","row","rowIndex","rowCellsObj","rowCellsMatrix","newCellElem","col","innerHTML","toString","push","addEventListener","shiftCell","appendChild","prepend","puzzleBoard","create","updateInfo","arr","from","val","index","length","i","emptyCell","getCellPosition","adjacent","getAdjacentCells","randomCell","_rand","to","cellsToSwap","a","b","_swapCellMatrix","checkIfSolvable","scramble","cell","cellIndex","destCellObj","innerText","toggle","remove","map","r","c","inversions","j","currentCondition","cellObj","contains","idArr","split","parseInt","filter","empty","nodesToSwap","getCellObj","_swapNodes","cellToSwap","_swapCellObj","checkIfSolved","alert","res","includes","indexOf","aCell","bCell","cellA","cellB","Math","random","floor","aId","bId","aParent","parentNode","aSibling","nextSibling","insertBefore","PuzzleControls","puzzleControlsElem","scrambleButtonElem","removeButtonElem","PuzzleInfo","puzzleInfoElem","puzzleInfoContentMovesLabel","puzzleInfoContentMovesCount","getElementsByClassName","Interactions","bindCreatePuzzleActions","formCreatePuzzle","ev","preventDefault","value","isNaN","newPuzzleBoard"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","import PuzzleControls from \"./puzzle-controls\";\nimport PuzzleInfo from \"./puzzle-info\";\n/**\n * Creates a new Puzzle object\n */\nclass PuzzleBoard {\n\n    /**\n     * The class constructor function\n     * @param rows {Number} The total number of rows\n     * @param columns {Number} The total number of columns\n     * @param tileSize {Number} The tile size in pixels, default 80px\n     */\n    constructor({rows, columns , tileSize = 100}){\n\n        this.rows = rows;\n        this.columns = columns;\n        this.tileSize = tileSize;\n        this.rootElem = document.getElementById(\"root\");\n\n        this.id = [\"puzzle-\", this.constructor._generateHex()].join(\"\");\n\n        this.puzzleBoardElem = null;\n        this.puzzleContainerElem = null;\n\n        this.rowsArr = [...Array(this.rows).keys()];\n        this.columnsArr = [...Array(this.columns).keys()];\n        this.rowsMatrix = [];\n        this.totalCellCount = this.rows * this.columns;\n\n        this.solvedCondition = null;\n\n        this.isSolved = false;\n\n        this.isScrambling = false;\n        this.shiftCellCount = 0;\n\n        this.puzzleInfo = null;\n        this.puzzleControls = null;\n\n    }\n\n    /**\n     * Creates a new, solved puzzle\n     */\n    create() {\n\n        const {\n            id,\n            columns,\n            rowsArr,\n            rootElem,\n            tileSize,\n            rowsMatrix,\n            columnsArr,\n            totalCellCount,\n            shiftCellCount\n        } = this;\n\n        const puzzleContainerElem = document.createElement(\"div\");\n        const puzzleBoardElem = document.createElement(\"ul\");\n\n        let cellNumber = 0;\n\n        // puzzle container element attributes\n        puzzleContainerElem.id = id;\n        puzzleContainerElem.classList.add(\"puzzle-container\");\n\n        // puzzle board element attributes and style\n        puzzleBoardElem.id = \"board-\"+id;\n        puzzleBoardElem.classList.add(\"puzzle-board-grid\");\n        puzzleBoardElem.setAttribute(\"style\", [\n            \"max-width:\",(columns*tileSize)+tileSize, \"px;\",\n        ].join(\"\"));\n\n        // creating cells and placing it on rows and columns\n        rowsArr.forEach((row, rowIndex) => {\n            const rowCellsObj = [], rowCellsMatrix = [];\n            columnsArr.forEach(col => {\n\n                const newCellElem = document.createElement(\"li\");\n                newCellElem.id = [\"cell-\", row, \"-\", col].join(\"\");\n                newCellElem.classList.add(\"grid-item\");\n                newCellElem.setAttribute(\"style\", [\n                    \"width:\", tileSize, \"px;\",\n                    \"height:\",tileSize,\"px;\",\n                    \"line-height:\", tileSize,\"px;\"\n                ].join(\"\"));\n\n                // adds the cell attributes by checking if the\n                // current cell element is not the last one\n                if(cellNumber < totalCellCount - 1){\n                    cellNumber++;\n                    newCellElem.innerHTML = cellNumber.toString();\n                    newCellElem.classList.add(\"number\");\n                    rowCellsMatrix.push(cellNumber);\n                } else {\n                    newCellElem.classList.add(\"empty\");\n                    rowCellsMatrix.push(\"empty\");\n                }\n\n                newCellElem.addEventListener(\"click\", () => this.shiftCell(newCellElem));\n\n                rowCellsObj.push(newCellElem);\n                puzzleBoardElem.appendChild(newCellElem);\n\n            });\n            rowsArr[rowIndex] = rowCellsObj;\n            rowsMatrix[rowIndex] = rowCellsMatrix;\n        });\n\n        // appends the puzzle board to the container\n        puzzleContainerElem\n            .appendChild(puzzleBoardElem);\n\n        // appends the new crated puzzle to the\n        // #root element on the index file\n        rootElem\n            .prepend(puzzleContainerElem);\n\n        this.puzzleBoardElem = puzzleBoardElem;\n        this.puzzleContainerElem = puzzleContainerElem;\n\n        // Creates the controls elements for the puzzle board\n        const puzzleControls = new PuzzleControls({puzzleBoard: this});\n        this.puzzleControls = puzzleControls.create();\n\n        // creates the puzzle info panel\n        const puzzleInfo = new PuzzleInfo({puzzleBoard: this});\n        this.puzzleInfo = puzzleInfo\n            .create()\n            .updateInfo({shiftCellCount});\n\n        // creates and store the solved condition string\n        let arr = Array.from(new Array(totalCellCount),(val,index)=>index+1);\n        arr[arr.length-1] = \"empty\";\n        this.solvedCondition = arr.join(\"\");\n\n        return this;\n    }\n\n    /**\n     * Scramble the puzzle, only results in solvable puzzles...\n     * @returns {PuzzleBoard}\n     */\n    scramble() {\n\n        this.isSolved = false;\n        this.isScrambling = true;\n        this.shiftCellCount = 0;\n        this.puzzleInfo.updateInfo({ shiftCellCount: this.shiftCellCount });\n\n        const { rowsMatrix, rowsArr } = this;\n\n        // do the scramble 200 times...\n        for(let i = 0; i < 200; i++){\n\n            const emptyCell = this.getCellPosition(\"empty\");\n            const adjacent = this.getAdjacentCells(emptyCell);\n            const randomCell = adjacent[this.constructor._rand({ from:0, to: adjacent.length-1 })];\n            const cellsToSwap = {a: emptyCell, b: randomCell};\n            this._swapCellMatrix(cellsToSwap);\n\n        }\n\n        // if is not solvable, runs the scramble again (recursions bad, I know)\n        if(!this.checkIfSolvable()){\n            return this.scramble();\n        }\n\n        // updating the HTML with the new values for each position\n        rowsMatrix.forEach((row, rowIndex) => {\n            row.forEach((cell, cellIndex) => {\n                const destCellObj = rowsArr[rowIndex][cellIndex];\n                destCellObj.innerText = cell === \"empty\" ? \"\" : cell;\n                destCellObj.classList.toggle(\"number\", cell !== \"empty\");\n                destCellObj.classList.toggle(\"empty\", cell === \"empty\");\n            });\n        });\n\n        this.isScrambling = false;\n\n        return this;\n    }\n\n    remove() {\n        this.puzzleContainerElem.remove();\n    }\n\n    /**\n     * Checks if the puzzle is solvable\n     * @returns {boolean}\n     */\n    checkIfSolvable(){\n\n        const arr = this.rowsMatrix.map(r => {\n            return r.map(c => c || null);\n        });\n\n        let inversions = 0;\n\n        for(let i = 0; i < arr.length - 1; i++) {\n            // Check if a larger number exists after the current\n            // place in the array, if so increment inversions.\n            for(let j = i + 1; j < arr.length; j++)\n            if(arr[i] > arr[j]) inversions++;\n\n            // Determine if the distance of the blank space from the bottom\n            // right is even or odd, and increment inversions if it is odd.\n            if(arr[i] === 0 && i % 2 === 1) inversions++;\n        }\n\n        // If inversions is even, the puzzle is solvable.\n        return (inversions % 2 === 0);\n    }\n\n    /**\n     * Checks if the puzzle is solved\n     */\n    checkIfSolved(){\n        const { solvedCondition, rowsMatrix } = this;\n        const currentCondition = rowsMatrix.map(r => {\n            return r.map(c => c).join(\"\");\n        }).join(\"\");\n\n        return currentCondition === solvedCondition;\n    }\n\n    /**\n     * Shifts the given cell to the empty space\n     * @param cellObj\n     */\n    shiftCell(cellObj) {\n\n        if(cellObj.classList.contains(\"empty\")){\n            return null;\n        }\n\n        const\n            idArr = cellObj.id.split(\"-\"),\n            cell = {\n                row: parseInt(idArr[1]),\n                col: parseInt(idArr[2])\n            },\n            emptyCell = this.getAdjacentCells(cell).filter(c => c.empty)[0];\n\n        if(emptyCell) {\n            const nodesToSwap = {\n                a: cellObj, b: this.getCellObj(emptyCell)\n            };\n            this.constructor._swapNodes(nodesToSwap);\n\n            const cellToSwap = {\n                a: cell, b: emptyCell\n            };\n            this._swapCellObj(cellToSwap);\n            this._swapCellMatrix(cellToSwap);\n\n            if(!this.isScrambling){\n                this.shiftCellCount++;\n                this.puzzleInfo.updateInfo({shiftCellCount: this.shiftCellCount})\n            }\n\n            this.isSolved = this.checkIfSolved();\n\n            if(this.isSolved){\n                alert(\"yay, you solved it!!\");\n            }\n\n        }\n    }\n\n    getAdjacentCells({row, col}) {\n\n        const\n            { rowsMatrix, rows, columns } = this,\n            adjacent = [];\n\n        // cells from lines above and under\n        adjacent[0] = row > 0 ? rowsMatrix[row-1] ? rowsMatrix[row-1][col] : null : null;\n        adjacent[1] = row < rows-1 ? rowsMatrix[row+1] ? rowsMatrix[row+1][col] : null : null;\n        // cells in the same line (before and after)\n        adjacent[2] = col > 0 ? rowsMatrix[row][col-1] : null;\n        adjacent[3] = col < columns-1 ? rowsMatrix[row][col+1] : null;\n\n        return adjacent.filter(a => !!a).map(c => this.getCellPosition(c));\n\n    }\n\n    getCellObj({row, col}) {\n        return this.rowsArr[row][col];\n    }\n\n    getCellPosition(cellNumber){\n        const { rowsMatrix } = this;\n        const res = { row: 0, col: 0, empty: false};\n        rowsMatrix.forEach((r,i) => {\n            if (r.includes(cellNumber)) {\n                res.row = i;\n                res.col = r.indexOf(cellNumber);\n                res.empty = cellNumber === \"empty\";\n            }\n        });\n        return res;\n    }\n\n    /**\n     * Private methods\n     * ==========================\n     * */\n\n    /**\n     * Generate an random HEX string\n     * @returns {string}\n     * @private\n     */\n    static _generateHex() {\n        return (Math.random()*0xFFFFFF<<0).toString(16);\n    }\n\n    /**\n     * Generate a random integer\n     * @param from\n     * @param to\n     * @returns {*}\n     * @private\n     */\n    static _rand({from, to}){\n        return Math.floor(Math.random() * (to - from + 1)) + from;\n    }\n\n    /**\n     * Swap DOM nodes\n     * @param a\n     * @param b\n     * @private\n     */\n    static _swapNodes({a, b}) {\n        const\n            aId = a.id,\n            bId = b.id,\n            aParent = a.parentNode,\n            aSibling = a.nextSibling === b ? a : a.nextSibling;\n        b.parentNode.insertBefore(a, b);\n        aParent.insertBefore(b, aSibling);\n        a.id = bId;\n        b.id = aId;\n    }\n\n    /**\n     * Swap cells on the object rowsArr property\n     * @private\n     */\n    _swapCellObj({a, b}){\n\n        const\n            // preserves the A and B values\n            aCell = this.getCellObj(a),\n            bCell = this.getCellObj(b);\n\n        // swaps A and B inside the rows cells object array\n        this.rowsArr[a.row][a.col] = bCell;\n        this.rowsArr[b.row][b.col] = aCell;\n    }\n\n    _swapCellMatrix({a, b}){\n\n        const\n            { rowsMatrix } = this,\n            cellA = rowsMatrix[a.row][a.col],\n            cellB = rowsMatrix[b.row][b.col];\n\n        this.rowsMatrix[a.row][a.col] = cellB;\n        this.rowsMatrix[b.row][b.col] = cellA;\n    }\n\n}\n\nexport default PuzzleBoard;","class PuzzleControls {\n\n    constructor({puzzleBoard}) {\n        this.puzzleBoard = puzzleBoard;\n    }\n\n    create(){\n\n        const { id, puzzleContainerElem } = this.puzzleBoard;\n\n        const puzzleControlsElem = document.createElement(\"div\");\n        puzzleControlsElem.id = \"controls-\"+id;\n        puzzleControlsElem.classList.add(\"puzzle-controls\");\n\n        const scrambleButtonElem = document.createElement(\"button\");\n        scrambleButtonElem.id = \"scramble-\"+id;\n        scrambleButtonElem.innerHTML = \"Scramble\";\n        scrambleButtonElem.classList.add(\"action\");\n        scrambleButtonElem.classList.add(\"scramble\");\n        scrambleButtonElem.addEventListener(\"click\", () => this.puzzleBoard.scramble());\n\n        const removeButtonElem = document.createElement(\"button\");\n        removeButtonElem.id = \"remove-\"+id;\n        removeButtonElem.innerHTML = \"Remove Board\";\n        removeButtonElem.classList.add(\"action\");\n        removeButtonElem.classList.add(\"remove\");\n        removeButtonElem.addEventListener(\"click\", () => this.puzzleBoard.remove());\n\n        puzzleControlsElem.appendChild(removeButtonElem);\n        puzzleControlsElem.appendChild(scrambleButtonElem);\n\n        puzzleContainerElem\n            .appendChild(puzzleControlsElem);\n\n    }\n\n}\n\nexport default PuzzleControls;","class PuzzleInfo {\n    constructor ({ puzzleBoard }) {\n        this.puzzleBoard = puzzleBoard;\n        this.puzzleInfoElem = null;\n    }\n\n    create() {\n\n        const { id, puzzleContainerElem } = this.puzzleBoard;\n\n        const puzzleInfoElem = document.createElement(\"div\");\n        puzzleInfoElem.id = \"info-\"+id;\n        puzzleInfoElem.classList.add(\"puzzle-info\");\n\n        const puzzleInfoContentMovesLabel = document.createElement(\"span\");\n        puzzleInfoContentMovesLabel.innerHTML = \"Moves: \";\n\n        const puzzleInfoContentMovesCount = document.createElement(\"span\");\n        puzzleInfoContentMovesCount.innerHTML = \"0\";\n        puzzleInfoContentMovesCount.classList.add(\"shift-cell-count\");\n\n        puzzleInfoElem\n            .appendChild(puzzleInfoContentMovesLabel)\n            .appendChild(puzzleInfoContentMovesCount);\n\n        puzzleContainerElem\n            .prepend(puzzleInfoElem);\n\n        this.puzzleInfoElem = puzzleInfoElem;\n\n        return this;\n    }\n\n    updateInfo({ shiftCellCount }) {\n\n        const { puzzleInfoElem } = this;\n        document.getElementById(puzzleInfoElem.id)\n            .getElementsByClassName(\"shift-cell-count\")[0]\n            .innerHTML = shiftCellCount.toString();\n        return this;\n\n    }\n}\n\nexport default PuzzleInfo;","import PuzzleBoard from \"../elements/puzzle-board\";\n\nconst Interactions = () => {\n\n    /**\n     * Binds the interactions from the creation form\n     */\n    const bindCreatePuzzleActions = () => {\n\n        const formCreatePuzzle = document.getElementById(\"create-new-puzzle\");\n\n        formCreatePuzzle.addEventListener(\"submit\", (ev) => {\n            ev.preventDefault();\n\n            const columns = parseInt(formCreatePuzzle[0].value);\n            const rows = parseInt(formCreatePuzzle[1].value);\n            const tileSize = parseInt(formCreatePuzzle[2].value);\n\n            if(!isNaN(columns) && !isNaN(rows) && (rows > 1 && columns > 1)){\n                const newPuzzleBoard = new PuzzleBoard({\n                    columns, rows, tileSize\n                });\n                newPuzzleBoard.create().scramble();\n            }\n        });\n\n        const puzzleBoard = new PuzzleBoard({rows: 4, columns: 4});\n        puzzleBoard.create().scramble();\n    };\n\n    bindCreatePuzzleActions();\n\n};\nexport default Interactions;","import \"./styles/index.scss\";\nimport Interactions from \"./interactions\";\n\ndocument.addEventListener(\"DOMContentLoaded\", Interactions);","// removed by extract-text-webpack-plugin"],"sourceRoot":""}